/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_CAN_FRAME_PB_H_INCLUDED
#define PB_CAN_FRAME_PB_H_INCLUDED
#include "../nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _CanFrame {
    /* CAN ID as a positive 32-bit integer */
    uint32_t can_id;
    /* Timestamp as a uint64 */
    uint64_t timestamp;
    /* CAN data as an array of 8 bytes */
    pb_byte_t can_data[8];
    /* Name of the CAN bus that the frame is read from */
    char can_bus[100];
} CanFrame;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define CanFrame_init_default                    {0, 0, {0}, ""}
#define CanFrame_init_zero                       {0, 0, {0}, ""}

/* Field tags (for use in manual encoding/decoding) */
#define CanFrame_can_id_tag                      1
#define CanFrame_timestamp_tag                   2
#define CanFrame_can_data_tag                    3
#define CanFrame_can_bus_tag                     4

/* Struct field encoding specification for nanopb */
#define CanFrame_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   can_id,            1) \
X(a, STATIC,   SINGULAR, UINT64,   timestamp,         2) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, can_data,          3) \
X(a, STATIC,   SINGULAR, STRING,   can_bus,           4)
#define CanFrame_CALLBACK NULL
#define CanFrame_DEFAULT NULL

extern const pb_msgdesc_t CanFrame_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CanFrame_fields &CanFrame_msg

/* Maximum encoded size of messages (where known) */
#define CAN_FRAME_PB_H_MAX_SIZE                  CanFrame_size
#define CanFrame_size                            128

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
